@startuml

    !include ../lexakai/lexakai.theme
    
    title "com.telenav.kivakit.data.compression.codecs.huffman.tree"
    
    interface Comparable
    
    class Code
    {
        --(constructors)--
        #Code()
        +Code(String)
        --
        +int lengthInBits()
        --(collection)--
        +int value()
        --(write)--
        +void write(BitWriter)
    }
    
    class CodedSymbol<Symbol>
    {
        --(constructors)--
        #CodedSymbol()
        +CodedSymbol(Symbol)
        +CodedSymbol(Symbol, Count)
        --
        +Code code()
        +void code(Code)
        --(collection)--
        +Symbol value()
        --(time)--
        +long frequency()
        +void increaseFrequency(long count)
    }
    
    Tree <|-- Leaf
    class Leaf<T>
    {
        --(constructors)--
        #Leaf()
        +Leaf(CodedSymbol<T>)
    }
    
    Tree <|-- Node
    class Node<T>
    {
        --(constructors)--
        #Node()
        +Node(Tree<T>, Tree<T>)
    }
    
    class Symbols<Symbol>
    {
        --(constructors)--
        +Symbols(CountMap<Symbol>)
        +Symbols(CountMap<Symbol>, Minimum)
        +Symbols(CountMap<Symbol>, Symbol, Minimum)
        --
        +Set<CodedSymbol<Symbol>> encoded()
        +CodedSymbol<Symbol> escape()
        +Tree<Symbol> tree(Maximum bits)
        --(collection)--
        +PropertyMap asProperties(StringConverter<Symbol>, Function<Symbol,String> commenter)
        +int size()
        +ObjectList<Symbol> symbols()
        --(read)--
        +Symbols<Symbol> load(PropertyMap properties, Symbol escape, StringConverter<Symbol>)
        +Symbols<Symbol> load(PropertyMap properties, StringConverter<Symbol>)
    }
    
    Comparable <|-- Tree
    abstract class Tree<Symbol>
    {
        --(constructors)--
        #Tree()
        --
        +Set<CodedSymbol<Symbol>> codedSymbols()
        +CodedSymbol<Symbol> decode(BitReader bits)
        +Tree<Symbol> tree(Symbols<Symbol>)
        --(collection)--
        +Map<CodedSymbol<Symbol>,Code> encode()
    }
    
@enduml

